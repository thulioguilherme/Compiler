
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Tue May 23 08:11:30 BRT 2017
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import java.util.HashSet;
import java.util.LinkedList;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Tue May 23 08:11:30 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\043\002\000\002\044" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\002" +
    "\000\002\011\007\000\002\013\003\000\002\013\002\000" +
    "\002\045\002\000\002\004\005\000\002\005\005\000\002" +
    "\005\002\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\007\005\000\002\007\002\000\002\046\002" +
    "\000\002\006\012\000\002\014\005\000\002\014\002\000" +
    "\002\015\006\000\002\016\007\000\002\016\002\000\002" +
    "\010\005\000\002\017\005\000\002\017\002\000\002\041" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\007" +
    "\000\002\041\006\000\002\023\004\000\002\023\002\000" +
    "\002\020\003\000\002\047\002\000\002\022\005\000\002" +
    "\024\005\000\002\024\002\000\002\025\004\000\002\026" +
    "\005\000\002\026\002\000\002\021\004\000\002\030\004" +
    "\000\002\030\002\000\002\027\004\000\002\027\005\000" +
    "\002\034\005\000\002\034\002\000\002\031\004\000\002" +
    "\042\005\000\002\042\002\000\002\050\002\000\002\035" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\004\000\002\036\005\000" +
    "\002\036\002\000\002\032\003\000\002\032\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\044\005\001\002\000\004\002\205\001" +
    "\002\000\004\046\006\001\002\000\004\011\000\001\002" +
    "\000\004\011\010\001\002\000\010\036\ufffc\042\ufffc\043" +
    "\011\001\002\000\004\046\147\001\002\000\006\036\013" +
    "\042\ufff0\001\002\000\004\046\142\001\002\000\004\042" +
    "\021\001\002\000\004\011\016\001\002\000\006\036\013" +
    "\042\ufff0\001\002\000\004\042\ufff1\001\002\000\004\025" +
    "\uffff\001\002\000\014\031\022\034\025\035\uffe6\042\021" +
    "\046\026\001\002\000\022\006\041\007\034\013\042\027" +
    "\047\046\046\047\037\050\043\051\033\001\002\000\004" +
    "\035\134\001\002\000\004\011\132\001\002\000\022\006" +
    "\041\007\034\013\042\027\047\046\046\047\037\050\043" +
    "\051\033\001\002\000\012\011\uffdd\013\uffdd\024\uffde\033" +
    "\uffdd\001\002\000\004\024\032\001\002\000\006\011\uffe4" +
    "\033\uffe4\001\002\000\006\011\uffe3\033\uffe3\001\002\000" +
    "\022\006\041\007\034\013\042\027\047\046\046\047\037" +
    "\050\043\051\033\001\002\000\050\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\026\uffc8\030" +
    "\uffc8\032\uffc8\033\uffc8\045\uffc8\001\002\000\016\013\uffc2" +
    "\027\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000" +
    "\016\013\042\027\047\046\046\047\037\050\043\051\033" +
    "\001\002\000\034\004\112\011\uffd4\012\uffd4\014\uffd4\015" +
    "\106\016\107\017\111\020\110\021\103\022\105\030\uffd4" +
    "\032\uffd4\033\uffd4\001\002\000\050\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\026\uffca\030" +
    "\uffca\032\uffca\033\uffca\045\uffca\001\002\000\050\004\uffcd" +
    "\005\100\006\uffcd\007\uffcd\010\077\011\uffcd\012\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\026\uffcd\030\uffcd\032\uffcd\033\uffcd\045\075\001\002\000" +
    "\016\013\uffc3\027\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\001\002\000\022\006\041\007\034\013\042\027\047\046" +
    "\046\047\037\050\043\051\033\001\002\000\050\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\026\uffc9\030\uffc9\032\uffc9\033\uffc9\045\uffc9\001\002\000" +
    "\042\004\uffd0\006\064\007\065\011\uffd0\012\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\026" +
    "\067\030\uffd0\032\uffd0\033\uffd0\001\002\000\006\011\uffe5" +
    "\033\uffe5\001\002\000\052\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\026\uffcc\030" +
    "\uffcc\032\uffcc\033\uffcc\045\uffcc\001\002\000\016\013\042" +
    "\027\047\046\046\047\037\050\043\051\033\001\002\000" +
    "\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\026\uffc6\030\uffc6\032\uffc6\033\uffc6\045\uffc6" +
    "\001\002\000\052\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\053\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\026\uffc4\030\uffc4\032" +
    "\uffc4\033\uffc4\045\uffc4\001\002\000\050\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb" +
    "\030\uffcb\032\uffcb\033\uffcb\045\uffcb\001\002\000\022\006" +
    "\041\007\034\013\042\027\047\046\046\047\037\050\043" +
    "\051\033\001\002\000\004\014\062\001\002\000\006\012" +
    "\057\014\uffd7\001\002\000\004\014\uffd9\001\002\000\022" +
    "\006\041\007\034\013\042\027\047\046\046\047\037\050" +
    "\043\051\033\001\002\000\006\012\057\014\uffd7\001\002" +
    "\000\004\014\uffd8\001\002\000\050\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\026\uffc5\030" +
    "\uffc5\032\uffc5\033\uffc5\045\uffc5\001\002\000\034\004\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\030\uffd3\032\uffd3\033\uffd3\001\002" +
    "\000\016\013\uffba\027\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\001\002\000\016\013\uffb9\027\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\001\002\000\016\013\042\027\047\046" +
    "\046\047\037\050\043\051\033\001\002\000\016\013\uffb8" +
    "\027\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000" +
    "\042\004\uffd0\006\064\007\065\011\uffd0\012\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\026" +
    "\067\030\uffd0\032\uffd0\033\uffd0\001\002\000\034\004\uffd1" +
    "\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\030\uffd1\032\uffd1\033\uffd1\001\002" +
    "\000\004\014\073\001\002\000\050\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\026\uffc7\030" +
    "\uffc7\032\uffc7\033\uffc7\045\uffc7\001\002\000\042\004\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\026\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\001\002\000\016\013\uffb5\027\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\016\013\042" +
    "\027\047\046\046\047\037\050\043\051\033\001\002\000" +
    "\016\013\uffb6\027\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\001\002\000\016\013\uffb7\027\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\001\002\000\050\004\uffcd\005\100\006\uffcd" +
    "\007\uffcd\010\077\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\045\075\001\002\000\042\004\uffce\006" +
    "\uffce\007\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\026\uffce\030\uffce\032" +
    "\uffce\033\uffce\001\002\000\022\006\uffbd\007\uffbd\013\uffbd" +
    "\027\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\001\002\000" +
    "\016\011\uffd6\012\uffd6\014\uffd6\030\uffd6\032\uffd6\033\uffd6" +
    "\001\002\000\022\006\uffbc\007\uffbc\013\uffbc\027\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\001\002\000\022\006\uffc1" +
    "\007\uffc1\013\uffc1\027\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\001\002\000\022\006\uffc0\007\uffc0\013\uffc0\027\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\022\006" +
    "\uffbe\007\uffbe\013\uffbe\027\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\001\002\000\022\006\uffbf\007\uffbf\013\uffbf\027" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000\022" +
    "\006\uffbb\007\uffbb\013\uffbb\027\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\001\002\000\022\006\041\007\034\013\042" +
    "\027\047\046\046\047\037\050\043\051\033\001\002\000" +
    "\016\011\uffd5\012\uffd5\014\uffd5\030\uffd5\032\uffd5\033\uffd5" +
    "\001\002\000\042\004\uffd0\006\064\007\065\011\uffd0\012" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\026\067\030\uffd0\032\uffd0\033\uffd0\001\002\000" +
    "\034\004\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\001\002\000\010\011\uffda\013\121\033\uffda\001\002" +
    "\000\006\011\uffdc\033\uffdc\001\002\000\022\006\041\007" +
    "\034\013\042\027\047\046\046\047\037\050\043\051\033" +
    "\001\002\000\004\014\123\001\002\000\006\011\uffdb\033" +
    "\uffdb\001\002\000\004\032\125\001\002\000\012\031\022" +
    "\034\025\042\021\046\026\001\002\000\006\011\uffdf\033" +
    "\127\001\002\000\012\031\022\034\025\042\021\046\026" +
    "\001\002\000\006\011\uffe2\033\uffe2\001\002\000\006\011" +
    "\uffe0\033\uffe0\001\002\000\014\031\022\034\025\035\uffe6" +
    "\042\021\046\026\001\002\000\004\035\uffe7\001\002\000" +
    "\010\011\uffe8\025\uffe8\033\uffe8\001\002\000\004\030\136" +
    "\001\002\000\012\031\022\034\025\042\021\046\026\001" +
    "\002\000\006\011\uffe1\033\uffe1\001\002\000\004\025\141" +
    "\001\002\000\004\002\ufffe\001\002\000\006\011\uffef\013" +
    "\uffef\001\002\000\006\011\uffec\013\145\001\002\000\004" +
    "\011\172\001\002\000\004\046\147\001\002\000\004\023" +
    "\157\001\002\000\006\012\ufff8\023\ufff8\001\002\000\004" +
    "\014\151\001\002\000\004\011\uffed\001\002\000\006\012" +
    "\153\023\ufff5\001\002\000\004\046\155\001\002\000\004" +
    "\023\ufff7\001\002\000\006\012\153\023\ufff5\001\002\000" +
    "\004\023\ufff6\001\002\000\010\037\160\040\161\041\163" +
    "\001\002\000\006\011\ufff4\014\ufff4\001\002\000\006\011" +
    "\ufff3\014\ufff3\001\002\000\006\011\164\014\uffe9\001\002" +
    "\000\006\011\ufff2\014\ufff2\001\002\000\004\046\147\001" +
    "\002\000\004\014\uffeb\001\002\000\004\023\167\001\002" +
    "\000\010\037\160\040\161\041\163\001\002\000\006\011" +
    "\164\014\uffe9\001\002\000\004\014\uffea\001\002\000\010" +
    "\036\ufffc\042\ufffc\043\011\001\002\000\006\036\013\042" +
    "\ufff0\001\002\000\004\042\021\001\002\000\004\011\uffee" +
    "\001\002\000\004\023\200\001\002\000\006\036\ufffd\042" +
    "\ufffd\001\002\000\010\037\160\040\161\041\163\001\002" +
    "\000\004\011\202\001\002\000\010\036\ufff9\042\ufff9\046" +
    "\147\001\002\000\006\036\ufffa\042\ufffa\001\002\000\006" +
    "\036\ufffb\042\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\006\001\001\000\002\001\001" +
    "\000\004\003\011\001\001\000\006\004\175\011\176\001" +
    "\001\000\006\006\014\007\013\001\001\000\002\001\001" +
    "\000\004\010\017\001\001\000\002\001\001\000\006\006" +
    "\014\007\016\001\001\000\002\001\001\000\004\044\137" +
    "\001\001\000\014\010\030\017\022\020\026\022\027\041" +
    "\023\001\001\000\014\021\134\027\035\031\043\032\034" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\123\027\035\031\043\032\034\035\037\001\001" +
    "\000\004\047\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\044\027\035\031\043" +
    "\032\034\035\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\114\035\037\001\001\000\006\030\103" +
    "\040\112\001\001\000\002\001\001\000\006\037\075\042" +
    "\073\001\001\000\002\001\001\000\014\021\071\027\035" +
    "\031\043\032\034\035\037\001\001\000\002\001\001\000" +
    "\006\033\065\034\062\001\001\000\002\001\001\000\004" +
    "\050\050\001\001\000\004\035\047\001\001\000\002\001" +
    "\001\000\004\036\051\001\001\000\002\001\001\000\016" +
    "\021\054\025\053\027\035\031\043\032\034\035\037\001" +
    "\001\000\002\001\001\000\004\026\055\001\001\000\002" +
    "\001\001\000\014\021\057\027\035\031\043\032\034\035" +
    "\037\001\001\000\004\026\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\067\035\037\001\001\000\002" +
    "\001\001\000\006\033\065\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\075\042\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\113\031\043\032\034\035\037\001\001\000\002\001\001" +
    "\000\006\033\065\034\115\001\001\000\002\001\001\000" +
    "\004\024\117\001\001\000\002\001\001\000\016\021\054" +
    "\025\121\027\035\031\043\032\034\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\030\020\026\022\027\041\125\001\001\000\004\023" +
    "\127\001\001\000\012\010\030\020\026\022\027\041\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\030\017\132\020\026\022\027\041\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\030\020\026\022\027\041\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\142\001" +
    "\001\000\004\014\143\001\001\000\002\001\001\000\006" +
    "\004\145\015\147\001\001\000\002\001\001\000\004\045" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\155\001\001\000\002\001\001\000\004\012\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\164\001\001\000\002\001\001\000\004\004\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\167\001" +
    "\001\000\004\016\170\001\001\000\002\001\001\000\004" +
    "\003\172\001\001\000\006\006\014\007\173\001\001\000" +
    "\004\010\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\200\001\001\000\002\001" +
    "\001\000\010\004\175\011\202\013\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
	static int error_count = 0;
	  
    public void syntax_error(Symbol s){
        System.out.println("O compilador encontrou um erro síntatico na linha "+ s.left + " coluna "+ s.right +".");
    }
    
    public static void newScope(){
		typenames.push(new HashSet<String>());
     }
      
     public static void deleteScope(){
		typenames.pop();
     }
     
     public static boolean lookupType(String name){
		for (HashSet<String> scope: typenames)
	    	if (scope.contains(name)) return true;
				return false;
     }
    
     public static void addType(String name){
		typenames.peek().add(name);
     }
    
     public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			 	Parser.newScope();
			 	Parser.addType(id.toString());
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= PROGRAM IDENTIFIER NT$0 SEMI declaracao_variaveis declaracao_de_subprogramas comando_composto NT$1 DOT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao_variaveis ::= VAR lista_declaracoes_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variaveis",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracao_variaveis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variaveis",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaracoes_variaveis ::= lista_de_identificadores COLON tipo SEMI lista_declaracoes_variaveis_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_declaracoes_variaveis",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_declaracoes_variaveis_cauda ::= lista_declaracoes_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_declaracoes_variaveis_cauda",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_declaracoes_variaveis_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_declaracoes_variaveis_cauda",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

						     	Parser.newScope();
							  	if( Parser.lookupType(id.toString()) ){
							  		System.out.println("O identificador "+ id.toString() + " já foi declarado.");
							  		Parser.error_count++;
							  	}else{
							  		Parser.addType(id.toString());
							  	}
						     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_de_identificadores ::= IDENTIFIER NT$2 lista_de_identificadores_cauda 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_de_identificadores_cauda ::= COMMA IDENTIFIER lista_de_identificadores_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores_cauda",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_de_identificadores_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores_cauda",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracao_de_subprogramas ::= declaracao_de_subprograma SEMI declaracao_de_subprogramas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_de_subprogramas",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracao_de_subprogramas ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_de_subprogramas",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

							  	Parser.newScope();
							  	if( Parser.lookupType(id.toString()) ){
							  		System.out.println("O identificador "+ id.toString() + " já foi declarado.");
							  		Parser.error_count++;
							  	}else{
							  		Parser.addType(id.toString());
							  	}	  	
							  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracao_de_subprograma ::= PROCEDURE IDENTIFIER NT$3 argumentos SEMI declaracao_variaveis declaracao_de_subprogramas comando_composto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_de_subprograma",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argumentos ::= LT_PAREN lista_de_parametros RT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_de_parametros ::= lista_de_identificadores COLON tipo lista_de_parametros_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_de_parametros_cauda ::= SEMI lista_de_identificadores COLON tipo lista_de_parametros_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_cauda",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_de_parametros_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_cauda",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando_composto ::= BEGIN lista_de_comandos END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_de_comandos ::= comando SEMI lista_de_comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_comandos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_de_comandos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_comandos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= variavel ASSMNT expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= ativacao_de_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando ::= IF expressao THEN comando parte_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comando ::= WHILE expressao DO comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parte_else ::= ELSE comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parte_else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variavel ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				if( !Parser.lookupType(id.toString()) ){
					System.out.println("A variavel "+ id.toString() +" nao foi instanciada!");
					Parser.error_count++;
				}	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

							 	if( !Parser.lookupType(id.toString()) ){
							 		System.out.println("Procedimento "+ id.toString() +" não declarado!");
							 		Parser.error_count++;
							 	}
							 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ativacao_de_procedimento ::= IDENTIFIER NT$4 ativacao_de_procedimento_cauda 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ativacao_de_procedimento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ativacao_de_procedimento_cauda ::= LT_PAREN lista_de_expressoes RT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ativacao_de_procedimento_cauda",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ativacao_de_procedimento_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ativacao_de_procedimento_cauda",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_de_expressoes ::= expressao lista_de_expressoes_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_de_expressoes_cauda ::= COMMA expressao lista_de_expressoes_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes_cauda",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_de_expressoes_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes_cauda",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao_simples expressao_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao_cauda ::= op_relacional expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_cauda",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_cauda",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao_simples ::= termo expressao_simples_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao_simples ::= sinal termo expressao_simples_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao_simples_cauda ::= op_aditivo termo expressao_simples_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples_cauda",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_simples_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples_cauda",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termo ::= fator termo_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termo_cauda ::= op_multiplicativo fator termo_cauda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo_cauda",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termo_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo_cauda",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			 if( !Parser.lookupType(id.toString()) ){
				System.out.println("A variavel "+ id.toString() +" nao foi instanciada!");
				Parser.error_count++;
			 }
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fator ::= IDENTIFIER NT$5 fator_cauda 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fator ::= INTEGER_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fator ::= REAL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fator ::= BOOLEAN_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fator ::= LT_PAREN expressao RT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fator ::= NOT fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fator_cauda ::= LT_PAREN lista_de_expressoes RT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator_cauda",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fator_cauda ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator_cauda",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sinal ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sinal ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_relacional ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_relacional ::= GTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_relacional ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_relacional ::= LESS_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_relacional ::= GTR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_relacional ::= INF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_aditivo ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_aditivo ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_aditivo ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op_multiplicativo ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_multiplicativo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op_multiplicativo ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_multiplicativo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_multiplicativo ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_multiplicativo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

